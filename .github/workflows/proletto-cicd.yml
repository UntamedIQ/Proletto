name: Proletto CI/CD Pipeline

on:
  push:
    branches: [ main, master, development ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Run flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Run code formatting check with Black
        run: |
          black --check .

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_proletto
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Setup test environment
        run: |
          # Set up environment variables for testing
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/test_proletto"
          export FLASK_ENV=testing
          export TESTING=true
          
      - name: Run tests with pytest
        run: |
          pytest --cov=. --cov-report=xml
          
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Build application artifacts
        run: |
          # Create a dist directory for artifacts
          mkdir -p dist
          # Copy necessary files
          cp -r *.py dist/
          cp -r static dist/
          cp -r templates dist/
          cp -r models.py dist/
          cp -r scrapers dist/ || true
          cp -r cache_utils.py dist/ || true
          cp -r opportunity_service.py dist/ || true
          cp -r self_learning_bot.py dist/ || true
          cp -r api.py dist/ || true
          cp deploy_replit.sh dist/
          cp requirements.txt dist/
          
      - name: Compress artifacts
        run: |
          tar -czf proletto-app.tar.gz -C dist .
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: proletto-app
          path: proletto-app.tar.gz
          retention-days: 5

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/development' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: proletto-app
          
      - name: Setup Replit CLI
        uses: replit/replit-deploy-action@v1
        with:
          deploy-key: ${{ secrets.REPLIT_DEPLOY_KEY }}
          
      - name: Deploy to Replit (Development)
        run: |
          tar -xzf proletto-app.tar.gz
          replit deploy --name proletto-dev
          
      - name: Run post-deployment checks
        run: |
          # Add validation checks here
          curl -s -o /dev/null -w "%{http_code}" https://proletto-dev.replit.app/api/health | grep 200

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: proletto-app
          
      - name: Setup Replit CLI
        uses: replit/replit-deploy-action@v1
        with:
          deploy-key: ${{ secrets.REPLIT_DEPLOY_KEY }}
          
      - name: Deploy to Replit (Staging)
        run: |
          tar -xzf proletto-app.tar.gz
          replit deploy --name proletto-staging
          
      - name: Run post-deployment checks
        run: |
          # Add validation checks here
          curl -s -o /dev/null -w "%{http_code}" https://proletto-staging.replit.app/api/health | grep 200

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: proletto-app
          
      - name: Setup Replit CLI
        uses: replit/replit-deploy-action@v1
        with:
          deploy-key: ${{ secrets.REPLIT_DEPLOY_KEY }}
          
      - name: Deploy to Replit (Production)
        run: |
          tar -xzf proletto-app.tar.gz
          replit deploy --name proletto
          
      - name: Run post-deployment verification
        run: |
          # Add validation checks here
          curl -s -o /dev/null -w "%{http_code}" https://proletto.replit.app/api/health | grep 200
          
      - name: Send deployment notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: '#3EB991'
          SLACK_TITLE: 'Production Deployment Completed'
          SLACK_MESSAGE: 'Proletto has been successfully deployed to production!'