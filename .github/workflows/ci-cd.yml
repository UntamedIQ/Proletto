name: CI/CD Pipeline

on:
  push:
    branches: [main, staging, development]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install development dependencies if a separate file exists
          if [ -f dev-requirements.txt ]; then
            pip install -r dev-requirements.txt
          fi

      - name: Run lint
        run: |
          if command -v flake8 &> /dev/null; then
            flake8 .
          else
            pip install flake8
            flake8 .
          fi

      - name: Run unit tests
        run: |
          if command -v pytest &> /dev/null; then
            pytest --maxfail=1 --disable-warnings
          else
            pip install pytest
            pytest --maxfail=1 --disable-warnings
          fi

  deploy_production:
    name: Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pre-deployment checks
        run: |
          if [ -f "pre_deploy_check.py" ]; then
            python pre_deploy_check.py --env production
          fi

      - name: Deploy to Replit (Production)
        env:
          REPLIT_API_KEY: ${{ secrets.REPLIT_API_KEY }}
          REPLIT_DEPLOY_KEY: ${{ secrets.REPLIT_DEPLOY_KEY }}
          REPLIT_PROJECT_ID: ${{ secrets.REPLIT_PROJECT_ID }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
          GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          SENDGRID_FROM_EMAIL: ${{ secrets.SENDGRID_FROM_EMAIL }}
        run: |
          # Install Replit CLI if needed for deployment
          curl -fsSL https://replit.com/cli-download/install.sh | bash
          
          # Use our production deployment script
          bash deploy_replit.sh
          
          # Notify deployment success
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"✅ Proletto deployed to PRODUCTION"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy_staging:
    name: Deploy to Staging
    needs: test
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pre-deployment checks
        run: |
          if [ -f "pre_deploy_check.py" ]; then
            python pre_deploy_check.py --env staging
          fi

      - name: Deploy to Replit (Staging)
        env:
          REPLIT_API_KEY: ${{ secrets.REPLIT_STAGING_API_KEY }}
          REPLIT_DEPLOY_KEY: ${{ secrets.REPLIT_STAGING_DEPLOY_KEY }}
          REPLIT_PROJECT_ID: ${{ secrets.REPLIT_STAGING_PROJECT_ID }}
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          FLASK_SECRET_KEY: ${{ secrets.STAGING_FLASK_SECRET_KEY }}
          GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          STRIPE_PUBLIC_KEY: ${{ secrets.STAGING_STRIPE_PUBLIC_KEY }}
        run: |
          # Install Replit CLI if needed for deployment
          curl -fsSL https://replit.com/cli-download/install.sh | bash
          
          # Use our staging deployment script with appropriate flag
          bash deploy_replit.sh --env=staging
          
          # Notify deployment success
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"✅ Proletto deployed to STAGING"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy_development:
    name: Deploy to Development
    needs: test
    if: github.ref == 'refs/heads/development' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to Replit (Development)
        env:
          REPLIT_API_KEY: ${{ secrets.REPLIT_DEV_API_KEY }}
          REPLIT_DEPLOY_KEY: ${{ secrets.REPLIT_DEV_DEPLOY_KEY }}
          REPLIT_PROJECT_ID: ${{ secrets.REPLIT_DEV_PROJECT_ID }}
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          REDIS_URL: ${{ secrets.DEV_REDIS_URL }}
        run: |
          # Install Replit CLI if needed for deployment
          curl -fsSL https://replit.com/cli-download/install.sh | bash
          
          # Use our development deployment script with appropriate flag
          bash deploy_replit.sh --env=development
          
          # Notify deployment success
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"✅ Proletto deployed to DEVELOPMENT"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}